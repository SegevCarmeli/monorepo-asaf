name: Build, Deploy, and Invalidate Cache
on:
  push:
    paths:
      - 'server/.github/workflows/build-deploy-refresh-cache-server.yaml' 
      - 'client/.github/workflows/build-deploy-refresh-cache-client.yaml'

jobs:
  build-deploy-invalidate-cache:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT_NAME: ${{ github.event.inputs.environment_name }}
      DOCKER_BUILD_CONTEXT: ${{ github.event.inputs.docker_build_context }}
      DOCKER_IMAGE_NAME_SUFFIX: ${{ github.event.inputs.docker_image_name_suffix }}
      K8S_NAMESPACE: ${{ github.event.inputs.k8s_namespace }}
      K8S_DEPLOYMENT: ${{ github.event.inputs.k8s_deployment }}
      RUNNER_NAME: ${{ github.event.inputs.runner_name }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get repository name as lowercase string
        id: string
        run: |
          echo "::set-output name=lowercase::$(echo -n $GITHUB_REPOSITORY | tr 'A-Z' 'a-z')"
        shell: bash

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}
          push: true
          tags: |
            ghcr.io/${{ steps.string.outputs.lowercase }}/${{ env.ENVIRONMENT_NAME }}:${{ github.sha }}
            ghcr.io/${{ steps.string.outputs.lowercase }}/${{ env.ENVIRONMENT_NAME }}:latest
          cache-from: type=local,src=/tmp/cache
          cache-to: type=local,dest=/tmp/cache

      - name: Deploy to Kubernetes
        if: success()
        run: |
          # Your deployment steps here
        shell: bash

      - name: Invalidate CloudFront cache
        if: success() && startsWith(env.ENVIRONMENT_NAME, 'prod')
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        shell: bash
